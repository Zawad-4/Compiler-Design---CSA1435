#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_IDENTIFIER_LENGTH 100
#define MAX_CONSTANT_LENGTH 100

void ignoreWhitespace(FILE *fp) {
    char ch;
    while ((ch = fgetc(fp)) != EOF) {
        if (!isspace(ch)) {
            ungetc(ch, fp);
            break;
        }
    }
}

void ignoreComments(FILE *fp) {
    char ch;
    if ((ch = fgetc(fp)) == '/') {
        if ((ch = fgetc(fp)) == '/') {
            while ((ch = fgetc(fp)) != '\n' && ch != EOF);
        } else if (ch == '*') {
            while (1) {
                if ((ch = fgetc(fp)) == EOF) break;
                if (ch == '*') {
                    if ((ch = fgetc(fp)) == '/') break;
                    ungetc(ch, fp);
                }
            }
        } else {
            ungetc(ch, fp);
        }
    } else {
        ungetc(ch, fp);
    }
}

void identifyTokens(FILE *fp) {
    char token[MAX_IDENTIFIER_LENGTH];
    int index;

    while (!feof(fp)) {
        ignoreWhitespace(fp);
        ignoreComments(fp);

        char ch = fgetc(fp);
        if (isalpha(ch)) {
            index = 0;
            do {
                if (index < MAX_IDENTIFIER_LENGTH - 1) {
                    token[index++] = ch;
                }
                ch = fgetc(fp);
            } while (isalnum(ch) || ch == '_');
            token[index] = '\0';
            printf("Identifier: %s\n", token);
            ungetc(ch, fp);
        } else if (isdigit(ch)) {
            index = 0;
            do {
                if (index < MAX_CONSTANT_LENGTH - 1) {
                    token[index++] = ch;
                }
                ch = fgetc(fp);
            } while (isdigit(ch));
            token[index] = '\0';
            printf("Constant: %s\n", token);
            ungetc(ch, fp);
        } else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
            printf("Operator: %c\n", ch);
        } else if (ch == EOF) {
            break;
        }
    }
}

int main() {
    FILE *fp = fopen("input.txt", "r");
    if (fp == NULL) {
        fprintf(stderr, "Could not open file\n");
        return 1;
    }

    identifyTokens(fp);
    fclose(fp);
    return 0;
}
